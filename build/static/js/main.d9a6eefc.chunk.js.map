{"version":3,"sources":["logo.svg","MapContainer.js","App.js","LocationSearchInput.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GoogleApiWrapper","apiKey","props","react_default","a","createElement","dist","google","zoom","onClick","onMapClick","initialCenter","lat","lng","events","length","filter","event","venue","map","key","id","position","lon","e","onMarkerClick","style","React","Component","width","height","Event","href","link","target","className","name","group","local_date","local_time","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","retrieveMeetups","state","options","url","qs","stringify","request","error","response","body","console","log","statusCode","JSON","parse","setState","city","loading","address","bind","assertThisInitialized","onLocationSelect","latLng","event_id","selectedEvent","class","App_Event","src_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9a6eefc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nexport const MapContainer = (props) => {\n\n    return (\n      <Map google={props.google} zoom={10} onClick={props.onMapClick} initialCenter={{\n        lat: 47.620422,\n        lng: -122.349358\n      }}>\n        { (props.events.length > 0) ? \n            props.events.filter(event => { return event.venue }).map(function(event) {\n              return (\n                <Marker \n                  key={event.id}\n                  position={{ lat: event.venue.lat, lng: event.venue.lon }} \n                  onClick={(e) => { props.onMarkerClick(event.id) }}\n                />\n              )\n            })\n          : ''}\n      </Map>\n    );\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCrpqRuiRv4Oug4YJn1651fMG_5LJBH8dU'\n})(MapContainer)\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MapContainer from './MapContainer';\nimport request from 'request';\nimport qs from 'querystring';\n\nimport LocationSearchInput from './LocationSearchInput';\n\nconst style = {\n  width: '100%',\n  height: '100%'\n}\n\nconst Event = (props) => {\n    return (\n      <a key = { props.id } href = { props.link } target = \"_self\" >\n        <div className=\"event\">\n          <h3 className=\"event-title\">\n            {props.name}\n          </h3>\n          <p className=\"event-group\">\n            hosted by {props.group.name}\n          </p>\n          <p>\n            <span>\n              {props.local_date} at {props.local_time}\n            </span>\n          </p>\n          {(props.venue) ?\n            <p>\n              hosted at {props.venue.name}\n            </p>\n            : ''}\n        </div>\n      </a >\n    )\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      city: {},\n      events: [],\n      selectedEvent: false\n    }\n  }\n\n  retrieveMeetups = (state) => {\n      const options = {\n        url: 'https://meetupmap.herokuapp.com/meetups',\n      }\n\n      if(state && state.lat && state.lng) {\n        options.url = options.url + '?' + qs.stringify({lat: state.lat, lon: state.lng});\n      }\n\n      request(options, function(error, response, body) {\n          console.log('error:', error); // Print the error if one occurred\n          console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n          console.log('body:', body); // Print the HTML for the Google homepage.\n\n          body = JSON.parse(body);\n          this.setState({\n            events: body.events,\n            city: body.city,\n            loading: false,\n            address: '' \n          })\n      }.bind(this));\n  }\n\n  onLocationSelect = (latLng) => {\n    const {lat, lng} = latLng;\n    this.setState({\n      lat,\n      lng\n    }, () => {\n      this.retrieveMeetups(this.state);\n    })\n  }\n\n  onMarkerClick = (event_id) => {\n    const selectedEvent = this.state.events.filter(event => {\n      return event.id == event_id;\n    })[0];\n    debugger;\n    this.setState({\n      selectedEvent\n    });\n  }\n\n  onMapClick = () => {\n    this.setState({\n      selectedEvent: false\n    })\n  }\n\n  componentDidMount() {\n    this.retrieveMeetups();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <aside>\n          <section className=\"heading\">\n            <h2>Seattle Tech Meetups</h2>\n            <span>\n              finally in map view!\n            </span>\n          </section>\n          {/*\n          <section>\n            <button onClick={() => { this.setRange('today') } } >\n              Today\n            </button>\n            <button onClick={() => { this.setRange('week') } } >\n              Week\n            </button>\n            <button onClick={() => { this.setRange('month') } } >\n              Month\n            </button>\n          </section>\n          */}\n          <section class=\"events-container\">\n            { (this.state.events.length > 0) ? \n                (this.state.selectedEvent) ? \n                  <Event {...this.state.selectedEvent} />\n                : this.state.events.map(function(event) {\n                  return (\n                    <Event {...event} />\n                  );\n                })\n            : ''}\n          </section>\n        </aside>\n        <section>\n          <MapContainer\n            style={style}\n            events={this.state.events}\n            city={this.state.city}\n            onMarkerClick={this.onMarkerClick}\n            onMapClick={this.onMapClick}\n          />\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from 'react-places-autocomplete';\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: '' };\n  }\n\n  handleChange = address => {\n    this.setState({ address });\n  };\n\n  handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => { \n        console.log('Success', latLng)\n        this.props.onSelect(latLng);\n      })\n      .catch(error => console.error('Error', error));\n  };\n\n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input',\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? 'suggestion-item--active'\n                  : 'suggestion-item';\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style,\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n  }\n}\n\nexport default LocationSearchInput;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}